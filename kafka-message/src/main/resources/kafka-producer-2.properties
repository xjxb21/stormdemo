#see http://orchome.com/511

#host/port列表，用于初始化建立和Kafka集群的连接。
#列表格式为host1:port1,host2:port2,....，无需添加所有的集群地址，
#kafka会根据提供的地址发现其他的地址（你可以多提供几个，以防提供的服务器关闭）
bootstrap.servers=192.168.8.101:9092,192.168.8.102:9092:192.168.8.103:9092
#key的序列化类（实现序列化接口）
#key.serializer=org.apache.kafka.common.serialization.StringSerializer
#value的序列化类（实现序列化接口）
#value.serializer=org.apache.kafka.common.serialization.StringSerializer
#生产者需要leader确认请求完成之前接收的应答数。
#此配置控制了发送消息的耐用性，支持以下配置：
#acks=0 如果设置为0，那么生产者将不等待任何消息确认。消息将立刻天际到socket缓冲区并考虑发送。在这种情况下不能保障消息被服务器接收到。并且重试机制不会生效（因为客户端不知道故障了没有）。每个消息返回的offset始终设置为-1。
#acks=1，这意味着leader写入消息到本地日志就立即响应，而不等待所有follower应答。在这种情况下，如果响应消息之后但follower还未复制之前leader立即故障，那么消息将会丢失。
#acks=all 这意味着leader将等待所有副本同步后应答消息。此配置保障消息不会丢失（只要至少有一个同步的副本或者）。这是最强壮的可用性保障。等价于acks=-1。
acks=1
#生产者用来缓存等待发送到服务器的消息的内存总字节数。如果消息发送比可传递到服务器的快，生产者将阻塞max.block.ms之后，抛出异常。
#此设置应该大致的对应生产者将要使用的总内存，但不是硬约束，因为生产者所使用的所有内存都用于缓冲。一些额外的内存将用于压缩（如果启动压缩），以及用于保持发送中的请求。
buffer.memory=33554432
#发送缓冲区批量发送大小上限
batch.size=16384
#发送缓冲区批量发送时间上限
linger.ms=5
#设置一个比零大的值，客户端如果发送失败则会重新发送。注意，这个重试功能和客户端在接到错误之后重新发送没什么不同。如果max.in.flight.requests.per.connection没有设置为1，有可能改变消息发送的顺序，因为如果2个批次发送到一个分区中，并第一个失败了并重试，但是第二个成功了，那么第二个批次将超过第一个。
retries=1
#分区规则（可以在程序中指定更加灵活）
#partitioner.class=com.xiao.demos.demo2.MyPartitioner

